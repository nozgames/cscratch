//
// Auto-generated asset header - DO NOT EDIT MANUALLY
// Generated by NoZ Game Engine Asset Importer
//

// @fonts
// LoadedAssets.fonts.roboto_black
//
// @meshs
// LoadedAssets.meshes.buildings.chestsmall
// LoadedAssets.meshes.buildings.conveyor
// LoadedAssets.meshes.buildings.extractor
// LoadedAssets.meshes.buildings.stone
// LoadedAssets.meshes.cursors.defaultcursor
// LoadedAssets.meshes.cursors.pickaxecursor
// LoadedAssets.meshes.resources.stoneore
// LoadedAssets.meshes.tiles.ore
//
// @shaders
// LoadedAssets.shaders.border_effect
// LoadedAssets.shaders._default
// LoadedAssets.shaders.gamma
// LoadedAssets.shaders.gizmo
// LoadedAssets.shaders.lit
// LoadedAssets.shaders.shadow
// LoadedAssets.shaders.text
// LoadedAssets.shaders.ui
// LoadedAssets.shaders.vignette
//
// @stylesheets
// LoadedAssets.ui.common
// LoadedAssets.ui.hud
// LoadedAssets.ui.inventory
//
// @textures
// LoadedAssets.textures.grid
// LoadedAssets.textures.icons.meshes.buildings.extractor
// LoadedAssets.textures.icons.meshes.buildings.stone
// LoadedAssets.textures.palette
//

#pragma once

// Forward declarations
struct Shader;
struct Texture;
struct Mesh;
struct Font;
struct Material;
struct Sound;

struct LoadedAssets
{
    struct
    {
        Font* roboto_black;
    } fonts;
    struct
    {
        struct
        {
            Mesh* chestsmall;
            Mesh* conveyor;
            Mesh* extractor;
            Mesh* stone;
        } buildings;
        struct
        {
            Mesh* defaultcursor;
            Mesh* pickaxecursor;
        } cursors;
        struct
        {
            Mesh* stoneore;
        } resources;
        struct
        {
            Mesh* ore;
        } tiles;
    } meshes;
    struct
    {
        Shader* border_effect;
        Shader* _default;
        Shader* gamma;
        Shader* gizmo;
        Shader* lit;
        Shader* shadow;
        Shader* text;
        Shader* ui;
        Shader* vignette;
    } shaders;
    struct
    {
        struct
        {
            struct
            {
                struct
                {
                    Texture* extractor;
                    Texture* stone;
                } buildings;
            } meshes;
        } icons;
        Texture* grid;
        Texture* palette;
    } textures;
    struct
    {
        StyleSheet* common;
        StyleSheet* hud;
        StyleSheet* inventory;
    } ui;
};

extern LoadedAssets Assets;

bool LoadAssets(size_t arena_size = 0);
void UnloadAssets();
